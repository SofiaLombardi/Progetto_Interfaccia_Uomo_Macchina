// <auto-generated />
using System;
using Flower_App_copia_1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flower_App_copia_1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flower_App_copia_1.Data.Allerte", b =>
                {
                    b.Property<string>("AllerteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradoAllerta")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AllerteId");

                    b.ToTable("Allerte");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Cliente", b =>
                {
                    b.Property<string>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataNascita")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClienteId");

                    b.HasIndex("UserId");

                    b.ToTable("Clienti");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.ClientePianta", b =>
                {
                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PiantaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientePiantaId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId", "PiantaId");

                    b.HasIndex("PiantaId");

                    b.ToTable("ClientePianta");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Consigli", b =>
                {
                    b.Property<string>("ConsiglioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitoloConsiglio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsiglioId");

                    b.ToTable("Consigli");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.IdeeCasa", b =>
                {
                    b.Property<string>("IdeeCasaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitoloIdea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdeeCasaId");

                    b.ToTable("IdeeCasa");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Pianta", b =>
                {
                    b.Property<string>("IdPianta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AciditàTerreno")
                        .HasColumnType("int");

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<int>("Colore")
                        .HasColumnType("int");

                    b.Property<int>("Concime")
                        .HasColumnType("int");

                    b.Property<string>("ConsigliId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DescrizioneAmbiente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizioneConcimazione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizioneEsposizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizioneFioritura")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizioneIrrigazione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizionePianta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizionePotatura")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescrizioneTerreno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Esposizione")
                        .HasColumnType("int");

                    b.Property<DateTime>("FiorituraMassima")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FiorituraMinima")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FotoPianta")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("IdeeCasaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Irrigazione")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeScientifico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PesantezzaDelTerreno")
                        .HasColumnType("int");

                    b.Property<DateTime>("Potatura")
                        .HasColumnType("datetime2");

                    b.Property<int>("Terreno")
                        .HasColumnType("int");

                    b.HasKey("IdPianta");

                    b.HasIndex("ConsigliId");

                    b.HasIndex("IdeeCasaId");

                    b.ToTable("Piante");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Tossicità", b =>
                {
                    b.Property<string>("TossicitàId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<bool>("ÈEdibile")
                        .HasColumnType("bit");

                    b.HasKey("TossicitàId");

                    b.ToTable("Tossicità");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Trattamenti", b =>
                {
                    b.Property<string>("IdTrattamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllerteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPianta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiantaIdPianta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Ripetizioni")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTrattamento");

                    b.HasIndex("AllerteId");

                    b.HasIndex("PiantaIdPianta");

                    b.ToTable("Trattamenti");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Cliente", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.ClientePianta", b =>
                {
                    b.HasOne("Flower_App_copia_1.Data.Cliente", "Cliente")
                        .WithMany("ClientePiante")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_App_copia_1.Data.Pianta", "Pianta")
                        .WithMany("ClientePiante")
                        .HasForeignKey("PiantaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Pianta");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Pianta", b =>
                {
                    b.HasOne("Flower_App_copia_1.Data.Consigli", "Consigli")
                        .WithMany()
                        .HasForeignKey("ConsigliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_App_copia_1.Data.IdeeCasa", "IdeeCasa")
                        .WithMany()
                        .HasForeignKey("IdeeCasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consigli");

                    b.Navigation("IdeeCasa");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Trattamenti", b =>
                {
                    b.HasOne("Flower_App_copia_1.Data.Allerte", "Allerta")
                        .WithMany()
                        .HasForeignKey("AllerteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_App_copia_1.Data.Pianta", "Pianta")
                        .WithMany()
                        .HasForeignKey("PiantaIdPianta");

                    b.Navigation("Allerta");

                    b.Navigation("Pianta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Cliente", b =>
                {
                    b.Navigation("ClientePiante");
                });

            modelBuilder.Entity("Flower_App_copia_1.Data.Pianta", b =>
                {
                    b.Navigation("ClientePiante");
                });
#pragma warning restore 612, 618
        }
    }
}
